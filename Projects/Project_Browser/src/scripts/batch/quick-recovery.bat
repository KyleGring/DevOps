@echo off
NET SESSION >nul 2>&1
if %errorLevel% == 0 (
    echo Success: Administrative permissions confirmed.
) else (
    echo Failure: Current permissions inadequate.
    powershell Start-Process '%~dpnx0' -Verb RunAs
    exit /b
)

# Quick Recovery and Backup System $BackupPath = "C:\Users\Kyle\Desktop\Development\Project_Browser\backups" $ConfigPath = "C:\Users\Kyle\Desktop\Development\Project_Browser\config"  function Restore-QuickBackup {     param(         [Parameter(Mandatory=$true)]         [string]$BackupPoint,         [switch]$Force     )          try {         # Validate backup exists         $backupFile = Join-Path $BackupPath "$BackupPoint.zip"         if (-not (Test-Path $backupFile)) {             throw "Backup point not found: $BackupPoint"         }          # Create restore point first         if (-not $Force) {             $restorePoint = Create-SystemRestorePoint             if (-not $restorePoint.Success) {                 throw "Failed to create system restore point"             }         }          # Stop running processes         Stop-BrowserProcesses          # Perform restore         Expand-Archive -Path $backupFile -DestinationPath (Split-Path $backupFile) -Force          # Verify restore         $verificationResult = Test-Configuration         if (-not $verificationResult.Success) {             throw "Restore verification failed"         }          return @{             Success = $true             Message = "Restore completed successfully"             Details = $verificationResult         }     }     catch {         return @{             Success = $false             Message = "Restore failed: $($_.Exception.Message)"             Error = $_         }     } }  function Create-QuickBackup {     param(         [string]$Name = (Get-Date -Format "yyyyMMdd_HHmmss"),         [switch]$Full     )          try {         # Create backup directory if it doesn't exist         if (-not (Test-Path $BackupPath)) {             New-Item -Path $BackupPath -ItemType Directory -Force | Out-Null         }          # Determine backup type and content         $backupContent = if ($Full) {             @(                 "$ConfigPath\*",                 "$env:APPDATA\Microsoft\Windows\Start Menu\Programs\Startup\*",                 "$env:USERPROFILE\.vscode\*",                 "$env:APPDATA\Code\User\settings.json"             )         }         else {             @(                 "$ConfigPath\*"             )         }          # Create backup         $backupFile = Join-Path $BackupPath "$Name.zip"         Compress-Archive -Path $backupContent -DestinationPath $backupFile -Force          # Verify backup         if (Test-Path $backupFile) {             return @{                 Success = $true                 Message = "Backup created successfully"                 Path = $backupFile             }         }         else {             throw "Backup file not created"         }     }     catch {         return @{             Success = $false             Message = "Backup failed: $($_.Exception.Message)"             Error = $_         }     } }  function Stop-BrowserProcesses {     $browsers = @('chrome', 'msedge', 'firefox', 'arc')     foreach ($browser in $browsers) {         Get-Process $browser -ErrorAction SilentlyContinue | Stop-Process -Force     } }  function Create-SystemRestorePoint {     try {         $description = "Pre-restore backup $(Get-Date -Format 'yyyy-MM-dd HH:mm')"         Checkpoint-Computer -Description $description -RestorePointType "MODIFY_SETTINGS"         return @{             Success = $true             Message = "System restore point created"         }     }     catch {         return @{             Success = $false             Message = "Failed to create system restore point: $($_.Exception.Message)"         }     } }  # Cleanup old backups function Remove-OldBackups {     param(         [int]$KeepCount = 5     )          Get-ChildItem $BackupPath -Filter "*.zip" |          Sort-Object CreationTime -Descending |          Select-Object -Skip $KeepCount |          Remove-Item -Force }  Export-ModuleMember -Function Restore-QuickBackup, Create-QuickBackup, Remove-OldBackups

