# Auto-elevate to admin
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    try {
        $argList = "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`""
        Start-Process PowerShell -Verb RunAs -ArgumentList $argList
        exit
    }
    catch {
        Write-Warning "Failed to elevate permissions. Error: $_"
        exit 1
    }
}

# Set execution policy for current process
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process -Force

function Get-SecureSystemInfo {
    try {
        $info = @{
            System = Get-SystemDetails
            Software = Get-SoftwareDetails
            Network = Get-NetworkDetails
            Security = Get-SecurityDetails
        }
        
        $outputPath = "C:\Users\Kyle\Desktop\Development\Project_Browser\system_info.json"
        $info | ConvertTo-Json -Depth 5 | Set-Content $outputPath -Force
        
        Write-Host "System information gathered successfully. Saved to: $outputPath"
        return $info
    }
    catch {
        Write-Error "Error gathering system info: $_"
    }
}

function Get-SystemDetails {
    return @{
        OS = (Get-CimInstance Win32_OperatingSystem).Caption
        Version = [System.Environment]::OSVersion.Version.ToString()
        RAM = [math]::Round((Get-CimInstance Win32_ComputerSystem).TotalPhysicalMemory/1GB)
        CPU = (Get-CimInstance Win32_Processor).Name
    }
}

function Get-SoftwareDetails {
    return @{
        PowerShell = $PSVersionTable.PSVersion.ToString()
        Chrome = (Get-ItemProperty 'HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\App Paths\chrome.exe' -ErrorAction SilentlyContinue).'(Default)'
        NotionPath = Get-NotionPath
    }
}

function Get-NetworkDetails {
    return @{
        Adapters = Get-NetAdapter | Where-Object Status -eq 'Up' | Select-Object Name, InterfaceDescription, LinkSpeed
        ConnectionType = Get-NetworkType
    }
}

function Get-SecurityDetails {
    return @{
        ExecutionPolicy = Get-ExecutionPolicy
        AntiVirusProduct = Get-CimInstance -Namespace root/SecurityCenter2 -ClassName AntiVirusProduct -ErrorAction SilentlyContinue
        FirewallStatus = Get-NetFirewallProfile | Select-Object Name, Enabled
    }
}

function Get-NotionPath {
    $paths = @(
        "${env:LocalAppData}\Programs\Notion\Notion.exe",
        "${env:ProgramFiles}\Notion\Notion.exe"
    )
    foreach ($path in $paths) {
        if (Test-Path $path) { return $path }
    }
    return $null
}

function Get-NetworkType {
    $connection = Get-NetConnectionProfile -ErrorAction SilentlyContinue
    return $connection.NetworkCategory
}

# Execute and pause to show results
Get-SecureSystemInfo | Format-List
Write-Host "`nPress any key to continue..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
